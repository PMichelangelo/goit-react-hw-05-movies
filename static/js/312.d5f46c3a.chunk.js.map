{"version":3,"file":"static/js/312.d5f46c3a.chunk.js","mappings":"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","sources":["api/movie.js","components/SearchMovie/SearchMovie.jsx","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3'\n})\n\nconst API_KEY = 'c1b8188455d3821cba1ec79084ee17ed'\nconst BEARER_TOKEN = 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMWI4MTg4NDU1ZDM4MjFjYmExZWM3OTA4NGVlMTdlZCIsInN1YiI6IjY1YjdmMDZjNWUxNGU1MDE2MmFlMWU1ZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IW781AOuYF1mEWb5Irhk_GdBt6plLw7t1_rJUMKx5l0';\n\nexport const getTrendingMovies = () => {\n  return instance.get('/trending/movie/day', {\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`\n    }\n  })\n}\n\nexport const getMovieByQuery = (query) => {\n  const options = {\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`\n    },\n    params: {\n      query: query\n    }\n  }\n  return instance.get('/search/movie', options)\n}\n\n\nexport const getMovieById = (movie_id) => {\n  return instance.get(`/movie/${movie_id}`, {\n    params: {\n      api_key: API_KEY,\n    }\n  } ,{\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`\n    }\n  })\n}\n\nexport const getCastById = movie_id => {\n  return instance.get(`/movie/${movie_id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    }\n  } ,{\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`\n    }\n  })\n}\n\nexport const getReviewsById = movie_id => {\n  return instance.get(`/movie/${movie_id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    }\n  } ,{\n    headers: {\n      Authorization: `Bearer ${BEARER_TOKEN}`\n    }\n  })\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation} from \"react-router-dom\";\nimport { getMovieByQuery } from \"api/movie\";\n\nconst SearchMovie = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  //const [error, setError] = useState(null);\nconst [searchParams, setSearchParams] = useSearchParams()\nconst [value, setValue] = useState(searchParams.get(\"query\") || \"\");\n  const location = useLocation()\n\n  const fetchMoviesByQuery = async (query) => {\n    try {\n      setLoading(true);\n      const response = await getMovieByQuery(query);\n      setMovies(response.data.results);\n    } catch (error) {\n      //setError(error.message);\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const query = searchParams.get(\"query\");\n\n    if (query) {\n      fetchMoviesByQuery(query);\n    }\n  }, [searchParams]);\n\n  const onFormSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!value) {\n      return alert(\"Sorry, but we can't find an empty query\");\n    }\n\n    try {\n      setLoading(true);\n      setSearchParams({ query: value });\n      await getMovieByQuery(value)\n      //const response = await getMovieByQuery(value);\n      //setMovies(response.data.results);\n      //setSearchParams({query: value})\n    } catch (error) {\n      //setError(error.message);\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false);\n    }\n\n    searchParams.set(\"query :\", value);\n\n  };\n\n  return (\n    <>\n      <form onSubmit={onFormSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => setValue( e.target.value )}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading && <p>Loading...</p>}\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{from: location}}>{title}</Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default SearchMovie;\n/*\nconst SearchMovie = () => {\n\n  const [movie, setMovie] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const search = searchParams.get(\"search\");\n  //const page = searchParams.get(\"page\");\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        setLoading(true);\n        const queryResponse = await getMovieByQuery(search);\n        setMovie(queryResponse.data);\n        console.log('queryResponse:', queryResponse.data);\n      }\n      catch (error) {\n        setError(error.message);\n      }\n      finally {\n        setLoading(false);\n      }\n    }\n\n    if (search) {\n      fetchMovies();\n    }\n  }, [search])\n\n  const handleSearch = ({ search }) => {\n    // setSearch(search);\n    setSearchParams({query: search });\n    // setPage(1);\n    setMovie([]);\n  }\n\n    const isMovie = Boolean(movie.length);\n\n    const elements = movie.results && movie.results.map(({ id, title }) =>\n    (<li key={id}>\n      <Link to={`/movies/${id}`}>{title}</Link>\n    </li>))\n\n    return (\n      <>\n        <SearchForm onSubmit={handleSearch} />\n        {error && <p>{error}</p>}\n        {loading && <p>...Loading</p>}\n        {isMovie && <ol>{elements}</ol>}\n      </>\n    )\n  }\n\n\nexport default SearchMovie*/\n\n  /*useEffect(() => {\n    const fetchMovieByQuery = async () => {\n      if (query === prevSearchRef.current) {\n      return;\n    }\n      try {\n        setLoading(true)\n        const queryResponse = await getMovieByQuery(query);\n        if(queryResponse.data.results && queryResponse.data.results.length > 0) {\n          setMovie(queryResponse.data);\n          console.log('queryResponse:', queryResponse.data);\n        } else {\n          alert('Your query is invalid');\n        }\n      } catch (error) {\n        setError(error.message)\n      }\n      finally {\n        setLoading(false)\n      }\n    }\n    if (!query) {\n      return\n    }\n    fetchMovieByQuery(query)\n      prevSearchRef.current = query;\n\n  }, [query])*/\n\n\n  //const handleSearch = (searchValue) => {\n   // console.log(\"Submited search:\", searchValue)\n    //setSearch(searchValue.trim())\n    //setSearchParams({query: routeQuery})\n   // console.log(\"Submited search:\", searchValue)\n  //}\n\n /*  const elements = movie.results && movie.results.map(({ id, title }) =>\n    (<li key={id}>\n    <Link to={`/movies/${id}`} state={{from: '/movies'}}>{title}</Link>\n    </li>))*/\n\n  /*return (\n    <div>\n      <SearchForm onSubmit ={onFormSubmit} />\n      {loading && <p>...loading</p>}\n      {error && <p>{error}</p>}\n      {movie && movie.results && movie.results.length > 0 && (\n        <div>\n          <ol>{elements}</ol>\n        </div>\n      )}\n    </div>\n  )\n}*/\n\n\n","import SearchMovie from \"components/SearchMovie/SearchMovie\"\n//import styles from './moviesPage.module.css'\n\n\nconst MoviesPage = () => {\n  return (\n    <div>\n      <SearchMovie/>\n    </div>\n  )\n}\n\nexport default MoviesPage\n"],"names":["instance","axios","baseURL","API_KEY","BEARER_TOKEN","getTrendingMovies","get","headers","Authorization","concat","getMovieByQuery","query","options","params","getMovieById","movie_id","api_key","getCastById","getReviewsById","_useState","useState","_useState2","_slicedToArray","movies","setMovies","_useState3","_useState4","loading","setLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState5","_useState6","value","setValue","location","useLocation","fetchMoviesByQuery","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","data","results","t0","console","error","finish","stop","_x","apply","arguments","useEffect","onFormSubmit","_ref2","_callee2","e","_context2","preventDefault","abrupt","alert","set","_x2","_jsxs","_Fragment","children","onSubmit","_jsx","type","onChange","target","map","_ref3","id","title","Link","to","state","from","SearchMovie"],"sourceRoot":""}